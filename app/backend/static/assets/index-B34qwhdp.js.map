{"version":3,"mappings":"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","names":["appLogo","appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","enableUnauthenticatedAccess","requireLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","getAppServicesTokenFromMe","r","json","acc","item","token","isUsingAppServicesLogin","appServicesLogout","checkLoggedIn","client","getToken","error","getUsername","activeAccount","getTokenClaims","BACKEND_URI","getHeaders","idToken","configApi","askApi","request","headers","parsedResponse","chatApi","shouldStream","url","getSpeechApi","text","blob","getCitationFilePath","citation","uploadFileApi","deleteUploadedFileApi","filename","listUploadedFilesApi","postChatHistoryApi","getChatHistoryListApi","count","continuationToken","getChatHistoryApi","id","deleteChatHistoryApi","RetrievalMode","GPT4VInput","VectorFieldOptions","isCitationValid","contextDataPoints","citationCandidate","dataPointsArray","dataPoint","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","jsx","AnswerIcon","Sparkle28Filled","supportedLngs","i18next","HttpApi","LanguageDetector","initReactI18next","daTranslation","enTranslation","esTranslation","frTranslation","jaTranslation","nlTranslation","ptBRTranslation","trTranslation","SpeechSynthesis","synth","getUtterance","lngCode","utterance","voice","SpeechOutputBrowser","i18n","useTranslation","currentLng","isPlaying","setIsPlaying","useState","startOrStopSpeech","color","IconButton","SpeechOutputAzure","speechConfig","isLoading","setIsLoading","localPlayingState","setLocalPlayingState","t","playAudio","speechUrl","jsxs","Fragment","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","followupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","copied","setCopied","handleCopy","textToCopy","err","Stack","styles","ReactMarkdown","rehypeRaw","remarkGfm","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","useCustomSpeechRecognition","SpeechRecognition","speechRecognition","SpeechInput","updateQuestion","isRecording","setIsRecording","startRecording","event","input","result","stopRecording","Tooltip","Button","Mic28Filled","LoginContext","createContext","_","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","showSpeechInput","question","setQuestion","loggedIn","useContext","isComposing","setIsComposing","useEffect","sendQuestion","onEnterPress","ev","handleCompositionStart","handleCompositionEnd","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Send28Filled","Example","value","onClick","ExampleList","onExampleClicked","useGPT4V","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","UserChatMessage","message","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","SyntaxHighlighter","ThoughtProcess","thoughts","k","a11yLight","MarkdownViewer","src","setContent","setError","removeAnchorLinks","markdown","ancorLinksRegex","markdownText","Spinner","SpinnerSize","MessageBar","MessageBarType","Link","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","useMsal","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","HistoryItem","onSelect","onDelete","isModalOpen","setIsModalOpen","handleDelete","useCallback","Delete24Regular","DeleteHistoryModal","isOpen","onClose","onConfirm","DefaultButton","HistoryProviderOptions","NoneProvider","answers","IndexedDBProvider","dbName","storeName","openDB","db","cursor","loadedItems","timestamp","tx","current","CosmosDBProvider","session","e","useHistoryManager","provider","HISTORY_COUNT_PER_LOAD","HistoryPanel","notify","onChatSelected","historyManager","history","setHistory","hasMoreHistory","setHasMoreHistory","loadMoreHistory","items","prevHistory","handleSelect","groupedHistory","groupHistory","Panel","PanelType","group","InfiniteLoadingButton","today","yesterday","lastWeek","lastMonth","groups","itemDate","func","buttonRef","useRef","observer","entries","entry","HistoryButton","History24Regular","SettingsButton","Settings24Regular","ClearChatButton","UploadFile","isCalloutVisible","setIsCalloutVisible","isUploading","setIsUploading","deletionStatus","setDeletionStatus","uploadedFile","setUploadedFile","uploadedFileError","setUploadedFileError","uploadedFiles","setUploadedFiles","handleButtonClick","listUploadedFiles","files","handleRemoveFile","handleUploadFile","file","formData","Add24Regular","Callout","Label","Text","TokenClaimsDisplay","instance","claims","setClaims","ToString","a","o","key","originalKey","columns","createTableColumn","b","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","LanguagePicker","onLanguageChange","handleLanguageChange","option","languagePickerId","useId","LocalLanguage24Regular","Dropdown","code","details","stackTokens","labelCalloutStackStyles","iconButtonStyles","iconProps","HelpCallout","props","toggleIsCalloutVisible","useBoolean","descriptionId","iconButtonId","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","setUseGPT4V","vectorFieldOption","setVectorFieldOption","onuseGPT4V","checked","onSetGPT4VInput","data","useGPT4VId","useGPT4VFieldId","gpt4VInputId","gpt4VInputFieldId","Checkbox","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","defaultRetrievalMode","retrievalMode","setRetrievalMode","onRetrievalModeChange","onVectorFieldsChange","retrievalModeId","retrievalModeFieldId","vectorFieldsId","vectorFieldsFieldId","Settings","promptTemplate","temperature","retrieveCount","seed","minimumSearchScore","minimumRerankerScore","useSemanticRanker","useSemanticCaptions","excludeCategory","includeCategory","gpt4vInput","vectorFieldList","showSemanticRankerOption","showGPT4VOptions","showVectorOption","useOidSecurityFilter","useGroupsSecurityFilter","onChange","useSuggestFollowupQuestions","promptTemplatePrefix","promptTemplateSuffix","showSuggestFollowupQuestions","promptTemplateId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","includeCategoryId","includeCategoryFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","shouldStreamId","shouldStreamFieldId","suggestFollowupQuestionsId","suggestFollowupQuestionsFieldId","renderLabel","labelId","fieldId","helpText","val","Chat","isConfigPanelOpen","setIsConfigPanelOpen","isHistoryPanelOpen","setIsHistoryPanelOpen","setPromptTemplate","setTemperature","setSeed","setMinimumRerankerScore","setMinimumSearchScore","setRetrieveCount","setUseSemanticRanker","setShouldStream","setUseSemanticCaptions","setIncludeCategory","setExcludeCategory","setUseSuggestFollowupQuestions","setVectorFieldList","setUseOidSecurityFilter","setUseGroupsSecurityFilter","setGPT4VInput","lastQuestionRef","chatMessageStreamEnd","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","setAnswers","streamedAnswers","setStreamedAnswers","speechUrls","setSpeechUrls","setShowGPT4VOptions","setShowSemanticRankerOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","setShowSpeechInput","setShowSpeechOutputBrowser","setShowSpeechOutputAzure","showChatHistoryBrowser","setShowChatHistoryBrowser","showChatHistoryCosmos","setShowChatHistoryCosmos","audio","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","historyProvider","makeApiRequest","clearChat","handleSettingsChange","field","example","onShowCitation","onToggleTab","tab","Helmet","streamedAnswer","q","newLang","x","LoginButton","setLoggedIn","username","setUsername","handleLoginPopup","handleLogoutPopup","Layout","menuOpen","setMenuOpen","menuRef","toggleMenu","handleClickOutside","NavLink","isActive","Outlet","LayoutWrapper","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","I18nextProvider","HelmetProvider","RouterProvider"],"ignoreList":[],"sources":["../../../frontend/logo.png","../../../frontend/src/authConfig.ts","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/i18n/config.ts","../../../frontend/src/components/Answer/SpeechOutputBrowser.tsx","../../../frontend/src/components/Answer/SpeechOutputAzure.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/SpeechInput.tsx","../../../frontend/src/loginContext.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/HistoryItem/HistoryItem.tsx","../../../frontend/src/components/HistoryProviders/IProvider.ts","../../../frontend/src/components/HistoryProviders/None.ts","../../../frontend/src/components/HistoryProviders/IndexedDB.ts","../../../frontend/src/components/HistoryProviders/CosmosDB.ts","../../../frontend/src/components/HistoryProviders/HistoryManager.ts","../../../frontend/src/components/HistoryPanel/HistoryPanel.tsx","../../../frontend/src/components/HistoryButton/HistoryButton.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/UploadFile/UploadFile.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/i18n/LanguagePicker.tsx","../../../frontend/src/components/HelpCallout/HelpCallout.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/Settings/Settings.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__DacSPZ0B__\"","// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\n\nconst appServicesAuthTokenUrl = \".auth/me\";\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\n\ninterface AppServicesToken {\n    id_token: string;\n    access_token: string;\n    user_claims: Record<string, any>;\n    expires_on: string;\n}\n\ninterface AuthSetup {\n    // Set to true if login elements should be shown in the UI\n    useLogin: boolean;\n    // Set to true if access control is enforced by the application\n    requireAccessControl: boolean;\n    // Set to true if the application allows unauthenticated access (only applies for documents without access control)\n    enableUnauthenticatedAccess: boolean;\n    /**\n     * Configuration object to be passed to MSAL instance on creation.\n     * For a full list of MSAL.js configuration parameters, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n     */\n    msalConfig: {\n        auth: {\n            clientId: string; // Client app id used for login\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\n        };\n        cache: {\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\n        };\n    };\n    loginRequest: {\n        /**\n         * Scopes you add here will be prompted for user consent during sign-in.\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n         * For more information about OIDC scopes, visit:\n         * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\n         */\n        scopes: Array<string>;\n    };\n    tokenRequest: {\n        scopes: Array<string>;\n    };\n}\n\n// Fetch the auth setup JSON data from the API if not already cached\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch(\"/auth_setup\");\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\n\nexport const requireAccessControl = authSetup.requireAccessControl;\n\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\n\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = authSetup.msalConfig;\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\n */\nexport const loginRequest = authSetup.loginRequest;\n\nconst tokenRequest = authSetup.tokenRequest;\n\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\nexport const getRedirectUri = () => {\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\n};\n\n// Cache the app services token if it's available\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\ndeclare global {\n    var cachedAppServicesToken: AppServicesToken | null;\n}\nglobalThis.cachedAppServicesToken = null;\n\n/**\n * Retrieves an access token if the user is logged in using app services authentication.\n * Checks if the current token is expired and fetches a new token if necessary.\n * Returns null if the app doesn't support app services authentication.\n *\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\n */\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\n        const currentDate = new Date();\n        const expiresOnDate = new Date(appServicesToken.expires_on);\n        return expiresOnDate > currentDate;\n    };\n\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\n        return Promise.resolve(globalThis.cachedAppServicesToken);\n    }\n\n    const getAppServicesTokenFromMe: () => Promise<AppServicesToken | null> = () => {\n        return fetch(appServicesAuthTokenUrl).then(r => {\n            if (r.ok) {\n                return r.json().then(json => {\n                    if (json.length > 0) {\n                        return {\n                            id_token: json[0][\"id_token\"] as string,\n                            access_token: json[0][\"access_token\"] as string,\n                            user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\n                                acc[item.typ] = item.val;\n                                return acc;\n                            }, {}) as Record<string, any>,\n                            expires_on: json[0][\"expires_on\"] as string\n                        } as AppServicesToken;\n                    }\n\n                    return null;\n                });\n            }\n\n            return null;\n        });\n    };\n\n    return getAppServicesTokenFromMe().then(token => {\n        if (token) {\n            if (checkNotExpired(token)) {\n                globalThis.cachedAppServicesToken = token;\n                return token;\n            }\n\n            return fetch(appServicesAuthTokenRefreshUrl).then(r => {\n                if (r.ok) {\n                    return getAppServicesTokenFromMe();\n                }\n                return null;\n            });\n        }\n\n        return null;\n    });\n};\n\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\n\n// Sign out of app services\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\nexport const appServicesLogout = () => {\n    window.location.href = appServicesAuthLogoutUrl;\n};\n\n/**\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\n */\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\n    if (client) {\n        const activeAccount = client.getActiveAccount();\n        if (activeAccount) {\n            return true;\n        }\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return true;\n    }\n\n    return false;\n};\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\n// Use the access token from app services login if available\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return Promise.resolve(appServicesToken.access_token);\n    }\n\n    return client\n        .acquireTokenSilent({\n            ...tokenRequest,\n            redirectUri: getRedirectUri()\n        })\n        .then(r => r.accessToken)\n        .catch(error => {\n            console.log(error);\n            return undefined;\n        });\n};\n\n/**\n * Retrieves the username of the active account.\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\n */\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.username;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken?.user_claims) {\n        return appServicesToken.user_claims.preferred_username;\n    }\n\n    return null;\n};\n\n/**\n * Retrieves the token claims of the active account.\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\n */\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.idTokenClaims;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return appServicesToken.user_claims;\n    }\n\n    return undefined;\n};\n","const BACKEND_URI = \"\";\n\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config, SimpleAPIResponse, HistoryListApiResponse, HistoryApiResponse } from \"./models\";\nimport { useLogin, getToken, isUsingAppServicesLogin } from \"../authConfig\";\n\nexport async function getHeaders(idToken: string | undefined): Promise<Record<string, string>> {\n    // If using login and not using app services, add the id token of the logged in account as the authorization\n    if (useLogin && !isUsingAppServicesLogin) {\n        if (idToken) {\n            return { Authorization: `Bearer ${idToken}` };\n        }\n    }\n\n    return {};\n}\n\nexport async function configApi(): Promise<Config> {\n    const response = await fetch(`${BACKEND_URI}/config`, {\n        method: \"GET\"\n    });\n\n    return (await response.json()) as Config;\n}\n\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(request)\n    });\n\n    if (response.status > 299 || !response.ok) {\n        throw Error(`Request failed with status ${response.status}`);\n    }\n    const parsedResponse: ChatAppResponseOrError = await response.json();\n    if (parsedResponse.error) {\n        throw Error(parsedResponse.error);\n    }\n\n    return parsedResponse as ChatAppResponse;\n}\n\nexport async function chatApi(request: ChatAppRequest, shouldStream: boolean, idToken: string | undefined): Promise<Response> {\n    let url = `${BACKEND_URI}/chat`;\n    if (shouldStream) {\n        url += \"/stream\";\n    }\n    const headers = await getHeaders(idToken);\n    return await fetch(url, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(request)\n    });\n}\n\nexport async function getSpeechApi(text: string): Promise<string | null> {\n    return await fetch(\"/speech\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            text: text\n        })\n    })\n        .then(response => {\n            if (response.status == 200) {\n                return response.blob();\n            } else if (response.status == 400) {\n                console.log(\"Speech synthesis is not enabled.\");\n                return null;\n            } else {\n                console.error(\"Unable to get speech synthesis.\");\n                return null;\n            }\n        })\n        .then(blob => (blob ? URL.createObjectURL(blob) : null));\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n\nexport async function uploadFileApi(request: FormData, idToken: string): Promise<SimpleAPIResponse> {\n    const response = await fetch(\"/upload\", {\n        method: \"POST\",\n        headers: await getHeaders(idToken),\n        body: request\n    });\n\n    if (!response.ok) {\n        throw new Error(`Uploading files failed: ${response.statusText}`);\n    }\n\n    const dataResponse: SimpleAPIResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function deleteUploadedFileApi(filename: string, idToken: string): Promise<SimpleAPIResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(\"/delete_uploaded\", {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ filename })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Deleting file failed: ${response.statusText}`);\n    }\n\n    const dataResponse: SimpleAPIResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function listUploadedFilesApi(idToken: string): Promise<string[]> {\n    const response = await fetch(`/list_uploaded`, {\n        method: \"GET\",\n        headers: await getHeaders(idToken)\n    });\n\n    if (!response.ok) {\n        throw new Error(`Listing files failed: ${response.statusText}`);\n    }\n\n    const dataResponse: string[] = await response.json();\n    return dataResponse;\n}\n\nexport async function postChatHistoryApi(item: any, idToken: string): Promise<any> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(\"/chat_history\", {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(item)\n    });\n\n    if (!response.ok) {\n        throw new Error(`Posting chat history failed: ${response.statusText}`);\n    }\n\n    const dataResponse: any = await response.json();\n    return dataResponse;\n}\n\nexport async function getChatHistoryListApi(count: number, continuationToken: string | undefined, idToken: string): Promise<HistoryListApiResponse> {\n    const headers = await getHeaders(idToken);\n    let url = `${BACKEND_URI}/chat_history/sessions?count=${count}`;\n    if (continuationToken) {\n        url += `&continuationToken=${continuationToken}`;\n    }\n\n    const response = await fetch(url.toString(), {\n        method: \"GET\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Getting chat histories failed: ${response.statusText}`);\n    }\n\n    const dataResponse: HistoryListApiResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function getChatHistoryApi(id: string, idToken: string): Promise<HistoryApiResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chat_history/sessions/${id}`, {\n        method: \"GET\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Getting chat history failed: ${response.statusText}`);\n    }\n\n    const dataResponse: HistoryApiResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function deleteChatHistoryApi(id: string, idToken: string): Promise<any> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chat_history/sessions/${id}`, {\n        method: \"DELETE\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Deleting chat history failed: ${response.statusText}`);\n    }\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport const enum GPT4VInput {\n    TextAndImages = \"textAndImages\",\n    Images = \"images\",\n    Texts = \"texts\"\n}\n\nexport const enum VectorFieldOptions {\n    Embedding = \"embedding\",\n    ImageEmbedding = \"imageEmbedding\",\n    Both = \"both\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    include_category?: string;\n    exclude_category?: string;\n    seed?: number;\n    top?: number;\n    temperature?: number;\n    minimum_search_score?: number;\n    minimum_reranker_score?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n    use_gpt4v?: boolean;\n    gpt4v_input?: GPT4VInput;\n    vector_fields: VectorFieldOptions[];\n    language: string;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: string };\n};\n\nexport type ResponseContext = {\n    data_points: string[];\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport type ChatAppResponseOrError = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    session_state: any;\n};\n\nexport type Config = {\n    showGPT4VOptions: boolean;\n    showSemanticRankerOption: boolean;\n    showVectorOption: boolean;\n    showUserUpload: boolean;\n    showLanguagePicker: boolean;\n    showSpeechInput: boolean;\n    showSpeechOutputBrowser: boolean;\n    showSpeechOutputAzure: boolean;\n    showChatHistoryBrowser: boolean;\n    showChatHistoryCosmos: boolean;\n};\n\nexport type SimpleAPIResponse = {\n    message?: string;\n};\n\nexport interface SpeechConfig {\n    speechUrls: (string | null)[];\n    setSpeechUrls: (urls: (string | null)[]) => void;\n    audio: HTMLAudioElement;\n    isPlaying: boolean;\n    setIsPlaying: (isPlaying: boolean) => void;\n}\n\nexport type HistoryListApiResponse = {\n    sessions: {\n        id: string;\n        entra_oid: string;\n        title: string;\n        timestamp: number;\n    }[];\n    continuation_token?: string;\n};\n\nexport type HistoryApiResponse = {\n    id: string;\n    entra_oid: string;\n    answers: any;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\n// Function to validate citation format and check if dataPoint starts with possible citation\nfunction isCitationValid(contextDataPoints: any, citationCandidate: string): boolean {\n    const regex = /.+\\.\\w{1,}(?:#\\S*)?$/;\n    if (!regex.test(citationCandidate)) {\n        return false;\n    }\n\n    // Check if contextDataPoints is an object with a text property that is an array\n    let dataPointsArray: string[];\n    if (Array.isArray(contextDataPoints)) {\n        dataPointsArray = contextDataPoints;\n    } else if (contextDataPoints && Array.isArray(contextDataPoints.text)) {\n        dataPointsArray = contextDataPoints.text;\n    } else {\n        return false;\n    }\n\n    const isValidCitation = dataPointsArray.some(dataPoint => {\n        return dataPoint.startsWith(citationCandidate);\n    });\n\n    return isValidCitation;\n}\n\nexport function parseAnswerToHtml(answer: ChatAppResponse, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const contextDataPoints = answer.context.data_points;\n    const citations: string[] = [];\n\n    // Trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.message.content.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n\n            if (!isCitationValid(contextDataPoints, part)) {\n                return `[${part}]`;\n            }\n\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled \n    primaryFill={\"rgba(255, 255, 255, 1)\"} \n    aria-hidden=\"true\" \n    aria-label=\"Answer logo\"\n    style={{ stroke: \"black\", strokeWidth: 2 }} \n  />;\n};\n","import i18next from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport HttpApi from \"i18next-http-backend\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport daTranslation from \"../locales/da/translation.json\";\nimport enTranslation from \"../locales/en/translation.json\";\nimport esTranslation from \"../locales/es/translation.json\";\nimport frTranslation from \"../locales/fr/translation.json\";\nimport jaTranslation from \"../locales/ja/translation.json\";\nimport nlTranslation from \"../locales/nl/translation.json\";\nimport ptBRTranslation from \"../locales/ptBR/translation.json\";\nimport trTranslation from \"../locales/tr/translation.json\";\n\nexport const supportedLngs: { [key: string]: { name: string; locale: string } } = {\n    da: {\n        name: \"Dansk\",\n        locale: \"da-DK\"\n    },\n    en: {\n        name: \"English\",\n        locale: \"en-US\"\n    },\n    es: {\n        name: \"Español\",\n        locale: \"es-ES\"\n    },\n    fr: {\n        name: \"Français\",\n        locale: \"fr-FR\"\n    },\n    ja: {\n        name: \"日本語\",\n        locale: \"ja-JP\"\n    },\n    nl: {\n        name: \"Nederlands\",\n        locale: \"nl-NL\"\n    },\n    ptBR: {\n        name: \"Português Brasileiro\",\n        locale: \"pt-BR\"\n    },\n    tr: {\n        name: \"Türkçe\",\n        locale: \"tr-TR\"\n    }\n};\n\ni18next\n    .use(HttpApi)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        resources: {\n            da: { translation: daTranslation },\n            en: { translation: enTranslation },\n            es: { translation: esTranslation },\n            fr: { translation: frTranslation },\n            ja: { translation: jaTranslation },\n            nl: { translation: nlTranslation },\n            ptBR: { translation: ptBRTranslation },\n            tr: { translation: trTranslation }\n        },\n        fallbackLng: \"en\",\n        supportedLngs: Object.keys(supportedLngs),\n        debug: import.meta.env.DEV,\n        interpolation: {\n            escapeValue: false // not needed for react as it escapes by default\n        }\n    });\n\nexport default i18next;\n","import { useState } from \"react\";\nimport { IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport { supportedLngs } from \"../../i18n/config\";\n\ninterface Props {\n    answer: string;\n}\n\nconst SpeechSynthesis = (window as any).speechSynthesis || (window as any).webkitSpeechSynthesis;\n\nlet synth: SpeechSynthesis | null = null;\n\ntry {\n    synth = SpeechSynthesis;\n} catch (err) {\n    console.error(\"SpeechSynthesis is not supported\");\n}\n\nconst getUtterance = function (text: string, lngCode: string = \"en-US\") {\n    if (synth) {\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.lang = lngCode;\n        utterance.volume = 1;\n        utterance.rate = 1;\n        utterance.pitch = 1;\n\n        let voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === lngCode)[0];\n        if (!voice) {\n            voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === \"en-US\")[0];\n        }\n\n        utterance.voice = voice;\n        return utterance;\n    }\n};\n\nexport const SpeechOutputBrowser = ({ answer }: Props) => {\n    const { t, i18n } = useTranslation();\n    const currentLng = i18n.language;\n    let lngCode = supportedLngs[currentLng]?.locale;\n    if (!lngCode) {\n        lngCode = \"en-US\";\n    }\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\n\n    const startOrStopSpeech = (answer: string) => {\n        if (synth != null) {\n            if (isPlaying) {\n                synth.cancel(); // removes all utterances from the utterance queue.\n                setIsPlaying(false);\n                return;\n            }\n            const utterance: SpeechSynthesisUtterance | undefined = getUtterance(answer, lngCode);\n\n            if (!utterance) {\n                return;\n            }\n\n            synth.speak(utterance);\n\n            utterance.onstart = () => {\n                setIsPlaying(true);\n                return;\n            };\n\n            utterance.onend = () => {\n                setIsPlaying(false);\n                return;\n            };\n        }\n    };\n    const color = isPlaying ? \"red\" : \"black\";\n\n    return (\n        <IconButton\n            style={{ color: color }}\n            iconProps={{ iconName: \"Volume3\" }}\n            title={t(\"tooltips.speakAnswer\")}\n            ariaLabel={t(\"tooltips.speakAnswer\")}\n            onClick={() => startOrStopSpeech(answer)}\n            disabled={!synth}\n        />\n    );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { IconButton } from \"@fluentui/react\";\nimport { getSpeechApi, SpeechConfig } from \"../../api\";\n\ninterface Props {\n    answer: string;\n    speechConfig: SpeechConfig;\n    index: number;\n    isStreaming: boolean;\n}\n\nexport const SpeechOutputAzure = ({ answer, speechConfig, index, isStreaming }: Props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [localPlayingState, setLocalPlayingState] = useState(false);\n    const { t } = useTranslation();\n\n    const playAudio = async (url: string) => {\n        speechConfig.audio.src = url;\n        await speechConfig.audio\n            .play()\n            .then(() => {\n                speechConfig.audio.onended = () => {\n                    speechConfig.setIsPlaying(false);\n                    setLocalPlayingState(false);\n                };\n                speechConfig.setIsPlaying(true);\n                setLocalPlayingState(true);\n            })\n            .catch(() => {\n                alert(\"Failed to play speech output.\");\n                console.error(\"Failed to play speech output.\");\n                speechConfig.setIsPlaying(false);\n                setLocalPlayingState(false);\n            });\n    };\n\n    const startOrStopSpeech = async (answer: string) => {\n        if (speechConfig.isPlaying) {\n            speechConfig.audio.pause();\n            speechConfig.audio.currentTime = 0;\n            speechConfig.setIsPlaying(false);\n            setLocalPlayingState(false);\n            return;\n        }\n        if (speechConfig.speechUrls[index]) {\n            playAudio(speechConfig.speechUrls[index]);\n            return;\n        }\n        setIsLoading(true);\n        await getSpeechApi(answer).then(async speechUrl => {\n            if (!speechUrl) {\n                alert(\"Speech output is not available.\");\n                console.error(\"Speech output is not available.\");\n                return;\n            }\n            setIsLoading(false);\n            speechConfig.setSpeechUrls(speechConfig.speechUrls.map((url, i) => (i === index ? speechUrl : url)));\n            playAudio(speechUrl);\n        });\n    };\n\n    const color = localPlayingState ? \"red\" : \"black\";\n\n    // We always preload the Sync icon in hidden mode so that there's no visual glitch when icon changes\n    return isLoading ? (\n        <IconButton style={{ color: color }} iconProps={{ iconName: \"Sync\" }} title=\"Loading speech\" ariaLabel=\"Loading speech\" disabled={true} />\n    ) : (\n        <>\n            <IconButton iconProps={{ iconName: \"Sync\" }} ariaHidden={true} disabled={true} style={{ display: \"none\" }} />\n            <IconButton\n                style={{ color: color }}\n                iconProps={{ iconName: \"Volume3\" }}\n                title={t(\"tooltips.speakAnswer\")}\n                ariaLabel={t(\"tooltips.speakAnswer\")}\n                onClick={() => startOrStopSpeech(answer)}\n                disabled={isStreaming}\n            />\n        </>\n    );\n};\n","import { useMemo, useState } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport DOMPurify from \"dompurify\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\n\nimport styles from \"./Answer.module.css\";\nimport { ChatAppResponse, getCitationFilePath, SpeechConfig } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\nimport { SpeechOutputBrowser } from \"./SpeechOutputBrowser\";\nimport { SpeechOutputAzure } from \"./SpeechOutputAzure\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    index: number;\n    speechConfig: SpeechConfig;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n    showSpeechOutputBrowser?: boolean;\n    showSpeechOutputAzure?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    index,\n    speechConfig,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions,\n    showSpeechOutputAzure,\n    showSpeechOutputBrowser\n}: Props) => {\n    const followupQuestions = answer.context?.followup_questions;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer, isStreaming, onCitationClicked), [answer]);\n    const { t } = useTranslation();\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n    const [copied, setCopied] = useState(false);\n\n    const handleCopy = () => {\n        // Single replace to remove all HTML tags to remove the citations\n        const textToCopy = sanitizedAnswerHtml.replace(/<a [^>]*><sup>\\d+<\\/sup><\\/a>|<[^>]+>/g, \"\");\n\n        navigator.clipboard\n            .writeText(textToCopy)\n            .then(() => {\n                setCopied(true);\n                setTimeout(() => setCopied(false), 2000);\n            })\n            .catch(err => console.error(\"Failed to copy text: \", err));\n    };\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: copied ? \"CheckMark\" : \"Copy\" }}\n                            title={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                            ariaLabel={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                            onClick={handleCopy}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title={t(\"tooltips.showThoughtProcess\")}\n                            ariaLabel={t(\"tooltips.showThoughtProcess\")}\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.context.thoughts?.length}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title={t(\"tooltips.showSupportingContent\")}\n                            ariaLabel={t(\"tooltips.showSupportingContent\")}\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.context.data_points}\n                        />\n                        {showSpeechOutputAzure && (\n                            <SpeechOutputAzure answer={sanitizedAnswerHtml} index={index} speechConfig={speechConfig} isStreaming={isStreaming} />\n                        )}\n                        {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText}>\n                    <ReactMarkdown children={sanitizedAnswerHtml} rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]} />\n                </div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>{t(\"citationWithColon\")}</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>{t(\"followupQuestions\")}</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const { t, i18n } = useTranslation();\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        {t(\"generatingAnswer\")}\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { SetStateAction, useState } from \"react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Mic28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./QuestionInput.module.css\";\nimport { supportedLngs } from \"../../i18n/config\";\n\ninterface Props {\n    updateQuestion: (question: string) => void;\n}\n\nconst useCustomSpeechRecognition = () => {\n    const { i18n } = useTranslation();\n    const currentLng = i18n.language;\n    let lngCode = supportedLngs[currentLng]?.locale;\n    if (!lngCode) {\n        lngCode = \"en-US\";\n    }\n\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    let speechRecognition: {\n        continuous: boolean;\n        lang: string;\n        interimResults: boolean;\n        maxAlternatives: number;\n        start: () => void;\n        onresult: (event: { results: { transcript: SetStateAction<string> }[][] }) => void;\n        onend: () => void;\n        onerror: (event: { error: string }) => void;\n        stop: () => void;\n    } | null = null;\n\n    try {\n        speechRecognition = new SpeechRecognition();\n        if (speechRecognition != null) {\n            speechRecognition.lang = lngCode;\n            speechRecognition.interimResults = true;\n        }\n    } catch (err) {\n        console.error(\"SpeechRecognition not supported\");\n        speechRecognition = null;\n    }\n\n    return speechRecognition;\n};\n\nexport const SpeechInput = ({ updateQuestion }: Props) => {\n    let speechRecognition = useCustomSpeechRecognition();\n    const { t } = useTranslation();\n    const [isRecording, setIsRecording] = useState<boolean>(false);\n    const startRecording = () => {\n        if (speechRecognition == null) {\n            console.error(\"SpeechRecognition not supported\");\n            return;\n        }\n\n        speechRecognition.onresult = (event: { results: { transcript: SetStateAction<string> }[][] }) => {\n            let input = \"\";\n            for (const result of event.results) {\n                input += result[0].transcript;\n            }\n            updateQuestion(input);\n        };\n        speechRecognition.onend = () => {\n            // NOTE: In some browsers (e.g. Chrome), the recording will stop automatically after a few seconds of silence.\n            setIsRecording(false);\n        };\n        speechRecognition.onerror = (event: { error: string }) => {\n            if (speechRecognition) {\n                speechRecognition.stop();\n                if (event.error == \"no-speech\") {\n                    alert(\"No speech was detected. Please check your system audio settings and try again.\");\n                } else if (event.error == \"language-not-supported\") {\n                    alert(\n                        `Speech recognition error detected: ${event.error}. The speech recognition input functionality does not yet work on all browsers, like Edge in Mac OS X with ARM chips. Try another browser/OS.`\n                    );\n                } else {\n                    alert(`Speech recognition error detected: ${event.error}.`);\n                }\n            }\n        };\n\n        setIsRecording(true);\n        speechRecognition.start();\n    };\n\n    const stopRecording = () => {\n        if (speechRecognition == null) {\n            console.error(\"SpeechRecognition not supported\");\n            return;\n        }\n        speechRecognition.stop();\n        setIsRecording(false);\n    };\n\n    if (speechRecognition == null) {\n        return <></>;\n    }\n    return (\n        <>\n            {!isRecording && (\n                <div className={styles.questionInputButtonsContainer}>\n                    <Tooltip content={t(\"tooltips.askWithVoice\")} relationship=\"label\">\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={startRecording} />\n                    </Tooltip>\n                </div>\n            )}\n            {isRecording && (\n                <div className={styles.questionInputButtonsContainer}>\n                    <Tooltip content={t(\"tooltips.stopRecording\")} relationship=\"label\">\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(250, 0, 0, 0.7)\" />} disabled={!isRecording} onClick={stopRecording} />\n                    </Tooltip>\n                </div>\n            )}\n        </>\n    );\n};\n","/**\n * This file defines a context for managing login state in a React application.\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n * For more information, refer to the official React documentation:\n * https://react.dev/learn/passing-data-deeply-with-context\n */\n\nimport { createContext } from \"react\";\n\nexport const LoginContext = createContext({\n    loggedIn: false,\n    setLoggedIn: (_: boolean) => {}\n});\n","import { useState, useEffect, useContext } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./QuestionInput.module.css\";\nimport { SpeechInput } from \"./SpeechInput\";\nimport { LoginContext } from \"../../loginContext\";\nimport { requireLogin } from \"../../authConfig\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n    showSpeechInput?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion, showSpeechInput }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n    const { loggedIn } = useContext(LoginContext);\n    const { t } = useTranslation();\n    const [isComposing, setIsComposing] = useState(false);\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (isComposing) return;\n\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const handleCompositionStart = () => {\n        setIsComposing(true);\n    };\n    const handleCompositionEnd = () => {\n        setIsComposing(false);\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\n\n    if (disableRequiredAccessControl) {\n        placeholder = \"Please login to continue...\";\n    }\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                disabled={disableRequiredAccessControl}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n                onCompositionStart={handleCompositionStart}\n                onCompositionEnd={handleCompositionEnd}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content={t(\"tooltips.submitQuestion\")} relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n            {showSpeechInput && <SpeechInput updateQuestion={setQuestion} />}\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./Example.module.css\";\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n    useGPT4V?: boolean;\n}\n\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\n    const { t } = useTranslation();\n\n    const DEFAULT_EXAMPLES: string[] = [t(\"defaultExamples.1\"), t(\"defaultExamples.2\"), t(\"defaultExamples.3\")];\n    const GPT4V_EXAMPLES: string[] = [t(\"gpt4vExamples.1\"), t(\"gpt4vExamples.2\"), t(\"gpt4vExamples.3\")];\n\n    return (\n        <ul className={styles.examplesNavList}>\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\n                <li key={i}>\n                    <Example text={question} value={question} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","import DOMPurify from \"dompurify\";\n\ntype ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[] | { text: string[]; images?: string[] };\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {textItems.map((c, ind) => {\n                const parsed = parseSupportingContentItem(c);\n                return (\n                    <li className={styles.supportingContentItem} key={`supporting-content-text-${ind}`}>\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\n                    </li>\n                );\n            })}\n            {imageItems?.map((img, ind) => {\n                return (\n                    <li className={styles.supportingContentItem} key={`supporting-content-image-${ind}`}>\n                        <img className={styles.supportingContentItemImage} src={img} />\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Stack } from \"@fluentui/react\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { Thoughts } from \"../../api\";\n\nSyntaxHighlighter.registerLanguage(\"json\", json);\n\ninterface Props {\n    thoughts: Thoughts[];\n}\n\nexport const ThoughtProcess = ({ thoughts }: Props) => {\n    return (\n        <ul className={styles.tList}>\n            {thoughts.map((t, ind) => {\n                return (\n                    <li className={styles.tListItem} key={ind}>\n                        <div className={styles.tStep}>{t.title}</div>\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\n                            {t.props &&\n                                (Object.keys(t.props) || []).map((k: any) => (\n                                    <span className={styles.tProp} key={k}>\n                                        {k}: {JSON.stringify(t.props?.[k])}\n                                    </span>\n                                ))}\n                        </Stack>\n                        {Array.isArray(t.description) ? (\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock} style={a11yLight}>\n                                {JSON.stringify(t.description, null, 2)}\n                            </SyntaxHighlighter>\n                        ) : (\n                            <div>{t.description}</div>\n                        )}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nimport styles from \"./MarkdownViewer.module.css\";\n\ninterface MarkdownViewerProps {\n    src: string;\n}\n\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\n    const [content, setContent] = useState<string>(\"\");\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setError] = useState<Error | null>(null);\n    const { t } = useTranslation();\n\n    /**\n     * Anchor links result in HTTP 404 errors as the URL they point to does not exist.\n     * This function removes them from the markdown.\n     */\n    const removeAnchorLinks = (markdown: string) => {\n        const ancorLinksRegex = /\\[.*?\\]\\(#.*?\\)/g;\n        return markdown.replace(ancorLinksRegex, \"\");\n    };\n\n    useEffect(() => {\n        const fetchMarkdown = async () => {\n            try {\n                const response = await fetch(src);\n\n                if (!response.ok) {\n                    throw new Error(\"Failed loading markdown file.\");\n                }\n\n                let markdownText = await response.text();\n                markdownText = removeAnchorLinks(markdownText);\n                setContent(markdownText);\n            } catch (error: any) {\n                setError(error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchMarkdown();\n    }, [src]);\n\n    return (\n        <div>\n            {isLoading ? (\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\n                </div>\n            ) : error ? (\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\n                        {error.message}\n                        <Link href={src} download>\n                            Download the file\n                        </Link>\n                    </MessageBar>\n                </div>\n            ) : (\n                <div>\n                    <IconButton\n                        className={styles.downloadButton}\n                        style={{ color: \"black\" }}\n                        iconProps={{ iconName: \"Save\" }}\n                        title={t(\"tooltips.save\")}\n                        ariaLabel={t(\"tooltips.save\")}\n                        href={src}\n                        download\n                    />\n                    <ReactMarkdown children={content} remarkPlugins={[remarkGfm]} className={`${styles.markdown} ${styles.markdownViewer}`} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\nimport { ThoughtProcess } from \"./ThoughtProcess\";\nimport { MarkdownViewer } from \"../MarkdownViewer\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { getHeaders } from \"../../api\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\n    const isDisabledCitationTab: boolean = !activeCitation;\n    const [citation, setCitation] = useState(\"\");\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { t } = useTranslation();\n\n    const fetchCitation = async () => {\n        const token = client ? await getToken(client) : undefined;\n        if (activeCitation) {\n            // Get hash from the URL as it may contain #page=N\n            // which helps browser PDF renderer jump to correct page N\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\n            const response = await fetch(activeCitation, {\n                method: \"GET\",\n                headers: await getHeaders(token)\n            });\n            const citationContent = await response.blob();\n            let citationObjectUrl = URL.createObjectURL(citationContent);\n            // Add hash back to the new blob URL\n            if (originalHash) {\n                citationObjectUrl += \"#\" + originalHash;\n            }\n            setCitation(citationObjectUrl);\n        }\n    };\n    useEffect(() => {\n        fetchCitation();\n    }, []);\n\n    const renderFileViewer = () => {\n        if (!activeCitation) {\n            return null;\n        }\n\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\n        switch (fileExtension) {\n            case \"png\":\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\n            case \"md\":\n                return <MarkdownViewer src={activeCitation} />;\n            default:\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\n        }\n    };\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText={t(\"headerTexts.thoughtProcess\")}\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText={t(\"headerTexts.supportingContent\")}\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.context.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText={t(\"headerTexts.citation\")}\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                {renderFileViewer()}\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { useState, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./HistoryItem.module.css\";\nimport { DefaultButton } from \"@fluentui/react\";\nimport { Delete24Regular } from \"@fluentui/react-icons\";\n\nexport interface HistoryData {\n    id: string;\n    title: string;\n    timestamp: number;\n}\n\ninterface HistoryItemProps {\n    item: HistoryData;\n    onSelect: (id: string) => void;\n    onDelete: (id: string) => void;\n}\n\nexport function HistoryItem({ item, onSelect, onDelete }: HistoryItemProps) {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const handleDelete = useCallback(() => {\n        setIsModalOpen(false);\n        onDelete(item.id);\n    }, [item.id, onDelete]);\n\n    return (\n        <div className={styles.historyItem}>\n            <button onClick={() => onSelect(item.id)} className={styles.historyItemButton}>\n                <div className={styles.historyItemTitle}>{item.title}</div>\n            </button>\n            <button onClick={() => setIsModalOpen(true)} className={styles.deleteButton} aria-label=\"delete this chat history\">\n                <Delete24Regular className={styles.deleteIcon} />\n            </button>\n            <DeleteHistoryModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onConfirm={handleDelete} />\n        </div>\n    );\n}\n\nfunction DeleteHistoryModal({ isOpen, onClose, onConfirm }: { isOpen: boolean; onClose: () => void; onConfirm: () => void }) {\n    if (!isOpen) return null;\n    const { t } = useTranslation();\n    return (\n        <div className={styles.modalOverlay}>\n            <div className={styles.modalContent}>\n                <h2 className={styles.modalTitle}>{t(\"history.deleteModalTitle\")}</h2>\n                <p className={styles.modalDescription}>{t(\"history.deleteModalDescription\")}</p>\n                <div className={styles.modalActions}>\n                    <DefaultButton onClick={onClose} className={styles.modalCancelButton}>\n                        {t(\"history.cancelLabel\")}\n                    </DefaultButton>\n                    <DefaultButton onClick={onConfirm} className={styles.modalConfirmButton}>\n                        {t(\"history.deleteLabel\")}\n                    </DefaultButton>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { ChatAppResponse } from \"../../api\";\n\nexport type HistoryMetaData = { id: string; title: string; timestamp: number };\nexport type Answers = [user: string, response: ChatAppResponse][];\n\nexport const enum HistoryProviderOptions {\n    None = \"none\",\n    IndexedDB = \"indexedDB\",\n    CosmosDB = \"cosmosDB\"\n}\n\nexport interface IHistoryProvider {\n    getProviderName(): HistoryProviderOptions;\n    resetContinuationToken(): void;\n    getNextItems(count: number, idToken?: string): Promise<HistoryMetaData[]>;\n    addItem(id: string, answers: Answers, idToken?: string): Promise<void>;\n    getItem(id: string, idToken?: string): Promise<Answers | null>;\n    deleteItem(id: string, idToken?: string): Promise<void>;\n}\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\n\nexport class NoneProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.None;\n    resetContinuationToken(): void {\n        return;\n    }\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\n        return [];\n    }\n    async addItem(id: string, answers: Answers): Promise<void> {\n        return;\n    }\n    async getItem(id: string): Promise<null> {\n        return null;\n    }\n    async deleteItem(id: string): Promise<void> {\n        return;\n    }\n}\n","import { IDBPDatabase, openDB } from \"idb\";\nimport { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\n\nexport class IndexedDBProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.IndexedDB;\n\n    private dbName: string;\n    private storeName: string;\n    private dbPromise: Promise<IDBPDatabase> | null = null;\n    private cursorKey: IDBValidKey | undefined;\n    private isCusorEnd: boolean = false;\n\n    constructor(dbName: string, storeName: string) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.cursorKey = undefined;\n        this.isCusorEnd = false;\n    }\n\n    private async init() {\n        const storeName = this.storeName;\n        if (!this.dbPromise) {\n            this.dbPromise = openDB(this.dbName, 1, {\n                upgrade(db) {\n                    if (!db.objectStoreNames.contains(storeName)) {\n                        const store = db.createObjectStore(storeName, { keyPath: \"id\" });\n                        store.createIndex(\"timestamp\", \"timestamp\");\n                    }\n                }\n            });\n        }\n        return this.dbPromise;\n    }\n\n    resetContinuationToken() {\n        this.cursorKey = undefined;\n        this.isCusorEnd = false;\n    }\n\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\n        const db = await this.init();\n        const tx = db.transaction(this.storeName, \"readonly\");\n        const store = tx.objectStore(this.storeName);\n        const index = store.index(\"timestamp\");\n\n        // return empty array if cursor is already at the end\n        if (this.isCusorEnd) {\n            return [];\n        }\n\n        // set cursor to the last key\n        let cursor = this.cursorKey ? await index.openCursor(IDBKeyRange.upperBound(this.cursorKey), \"prev\") : await index.openCursor(null, \"prev\");\n\n        // return empty array means no more history or no data. set isCursorEnd to true and return empty array\n        if (!cursor) {\n            this.isCusorEnd = true;\n            return [];\n        }\n\n        const loadedItems: { id: string; title: string; timestamp: number; answers: Answers }[] = [];\n        for (let i = 0; i < count && cursor; i++) {\n            loadedItems.push(cursor.value);\n            cursor = await cursor.continue();\n        }\n\n        // set isCursorEnd to true if cursor is null\n        if (!cursor) {\n            this.isCusorEnd = true;\n        }\n\n        // update cursorKey\n        this.cursorKey = cursor?.key;\n\n        return loadedItems;\n    }\n\n    async addItem(id: string, answers: Answers): Promise<void> {\n        const timestamp = new Date().getTime();\n        const db = await this.init(); // 自動的に初期化\n        const tx = db.transaction(this.storeName, \"readwrite\");\n        const current = await tx.objectStore(this.storeName).get(id);\n        if (current) {\n            await tx.objectStore(this.storeName).put({ ...current, id, timestamp, answers });\n        } else {\n            const title = answers[0][0].length > 50 ? answers[0][0].substring(0, 50) + \"...\" : answers[0][0];\n            await tx.objectStore(this.storeName).add({ id, title, timestamp, answers });\n        }\n        await tx.done;\n        return;\n    }\n\n    async getItem(id: string): Promise<Answers | null> {\n        const db = await this.init();\n        const tx = db.transaction(this.storeName, \"readonly\");\n        const item = await tx.objectStore(this.storeName).get(id);\n        return item ? item.answers : null;\n    }\n\n    async deleteItem(id: string): Promise<void> {\n        const db = await this.init();\n        await db.delete(this.storeName, id);\n        return;\n    }\n}\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\nimport { deleteChatHistoryApi, getChatHistoryApi, getChatHistoryListApi, postChatHistoryApi } from \"../../api\";\n\nexport class CosmosDBProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.CosmosDB;\n\n    private continuationToken: string | undefined;\n    private isItemEnd: boolean = false;\n\n    resetContinuationToken() {\n        this.continuationToken = undefined;\n        this.isItemEnd = false;\n    }\n\n    async getNextItems(count: number, idToken?: string): Promise<HistoryMetaData[]> {\n        if (this.isItemEnd) {\n            return [];\n        }\n\n        try {\n            const response = await getChatHistoryListApi(count, this.continuationToken, idToken || \"\");\n            this.continuationToken = response.continuation_token;\n            if (!this.continuationToken) {\n                this.isItemEnd = true;\n            }\n            return response.sessions.map(session => ({\n                id: session.id,\n                title: session.title,\n                timestamp: session.timestamp\n            }));\n        } catch (e) {\n            console.error(e);\n            return [];\n        }\n    }\n\n    async addItem(id: string, answers: Answers, idToken?: string): Promise<void> {\n        await postChatHistoryApi({ id, answers }, idToken || \"\");\n        return;\n    }\n\n    async getItem(id: string, idToken?: string): Promise<Answers | null> {\n        const response = await getChatHistoryApi(id, idToken || \"\");\n        return response.answers || null;\n    }\n\n    async deleteItem(id: string, idToken?: string): Promise<void> {\n        await deleteChatHistoryApi(id, idToken || \"\");\n        return;\n    }\n}\n","import { useMemo } from \"react\";\nimport { IHistoryProvider, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\nimport { NoneProvider } from \"../HistoryProviders/None\";\nimport { IndexedDBProvider } from \"../HistoryProviders/IndexedDB\";\nimport { CosmosDBProvider } from \"../HistoryProviders/CosmosDB\";\n\nexport const useHistoryManager = (provider: HistoryProviderOptions): IHistoryProvider => {\n    const providerInstance = useMemo(() => {\n        switch (provider) {\n            case HistoryProviderOptions.IndexedDB:\n                return new IndexedDBProvider(\"chat-database\", \"chat-history\");\n            case HistoryProviderOptions.CosmosDB:\n                return new CosmosDBProvider();\n            case HistoryProviderOptions.None:\n            default:\n                return new NoneProvider();\n        }\n    }, [provider]);\n\n    return providerInstance;\n};\n","import { useMsal } from \"@azure/msal-react\";\nimport { getToken, useLogin } from \"../../authConfig\";\nimport { Panel, PanelType, Spinner } from \"@fluentui/react\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { HistoryData, HistoryItem } from \"../HistoryItem\";\nimport { Answers, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\nimport { useHistoryManager, HistoryMetaData } from \"../HistoryProviders\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./HistoryPanel.module.css\";\n\nconst HISTORY_COUNT_PER_LOAD = 20;\n\nexport const HistoryPanel = ({\n    provider,\n    isOpen,\n    notify,\n    onClose,\n    onChatSelected\n}: {\n    provider: HistoryProviderOptions;\n    isOpen: boolean;\n    notify: boolean;\n    onClose: () => void;\n    onChatSelected: (answers: Answers) => void;\n}) => {\n    const historyManager = useHistoryManager(provider);\n    const [history, setHistory] = useState<HistoryMetaData[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [hasMoreHistory, setHasMoreHistory] = useState(false);\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    useEffect(() => {\n        if (!isOpen) return;\n        if (notify) {\n            setHistory([]);\n            historyManager.resetContinuationToken();\n            setHasMoreHistory(true);\n        }\n    }, [isOpen, notify]);\n\n    const loadMoreHistory = async () => {\n        setIsLoading(() => true);\n        const token = client ? await getToken(client) : undefined;\n        const items = await historyManager.getNextItems(HISTORY_COUNT_PER_LOAD, token);\n        if (items.length === 0) {\n            setHasMoreHistory(false);\n        }\n        setHistory(prevHistory => [...prevHistory, ...items]);\n        setIsLoading(() => false);\n    };\n\n    const handleSelect = async (id: string) => {\n        const token = client ? await getToken(client) : undefined;\n        const item = await historyManager.getItem(id, token);\n        if (item) {\n            onChatSelected(item);\n        }\n    };\n\n    const handleDelete = async (id: string) => {\n        const token = client ? await getToken(client) : undefined;\n        await historyManager.deleteItem(id, token);\n        setHistory(prevHistory => prevHistory.filter(item => item.id !== id));\n    };\n\n    const groupedHistory = useMemo(() => groupHistory(history), [history]);\n\n    const { t } = useTranslation();\n\n    return (\n        <Panel\n            type={PanelType.customNear}\n            style={{ padding: \"0px\" }}\n            headerText={t(\"history.chatHistory\")}\n            customWidth=\"300px\"\n            isBlocking={false}\n            isOpen={isOpen}\n            onDismiss={() => onClose()}\n            onDismissed={() => {\n                setHistory([]);\n                setHasMoreHistory(true);\n                historyManager.resetContinuationToken();\n            }}\n        >\n            <div>\n                {Object.entries(groupedHistory).map(([group, items]) => (\n                    <div key={group} className={styles.group}>\n                        <p className={styles.groupLabel}>{t(group)}</p>\n                        {items.map(item => (\n                            <HistoryItem key={item.id} item={item} onSelect={handleSelect} onDelete={handleDelete} />\n                        ))}\n                    </div>\n                ))}\n                {isLoading && <Spinner style={{ marginTop: \"10px\" }} />}\n                {history.length === 0 && !isLoading && <p>{t(\"history.noHistory\")}</p>}\n                {hasMoreHistory && !isLoading && <InfiniteLoadingButton func={loadMoreHistory} />}\n            </div>\n        </Panel>\n    );\n};\n\nfunction groupHistory(history: HistoryData[]) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n    const lastMonth = new Date(today);\n    lastMonth.setDate(lastMonth.getDate() - 30);\n\n    return history.reduce(\n        (groups, item) => {\n            const itemDate = new Date(item.timestamp);\n            let group;\n\n            if (itemDate >= today) {\n                group = \"history.today\";\n            } else if (itemDate >= yesterday) {\n                group = \"history.yesterday\";\n            } else if (itemDate >= lastWeek) {\n                group = \"history.last7days\";\n            } else if (itemDate >= lastMonth) {\n                group = \"history.last30days\";\n            } else {\n                group = itemDate.toLocaleDateString(undefined, { year: \"numeric\", month: \"long\" });\n            }\n\n            if (!groups[group]) {\n                groups[group] = [];\n            }\n            groups[group].push(item);\n            return groups;\n        },\n        {} as Record<string, HistoryData[]>\n    );\n}\n\nconst InfiniteLoadingButton = ({ func }: { func: () => void }) => {\n    const buttonRef = useRef(null);\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            entries => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        if (buttonRef.current) {\n                            func();\n                        }\n                    }\n                });\n            },\n            {\n                root: null,\n                threshold: 0\n            }\n        );\n\n        if (buttonRef.current) {\n            observer.observe(buttonRef.current);\n        }\n\n        return () => {\n            if (buttonRef.current) {\n                observer.unobserve(buttonRef.current);\n            }\n        };\n    }, []);\n\n    return <button ref={buttonRef} onClick={func} />;\n};\n","import { History24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./HistoryButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const HistoryButton = ({ className, disabled, onClick }: Props) => {\n    const { t } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<History24Regular />} disabled={disabled} onClick={onClick}>\n                {t(\"history.openChatHistory\")}\n            </Button>\n        </div>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    const { t } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {t(\"developerSettings\")}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    const { t, i18n } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {t(\"clearChat\")}\n            </Button>\n        </div>\n    );\n};\n","import React, { useState, ChangeEvent } from \"react\";\nimport { Callout, Label, Text } from \"@fluentui/react\";\nimport { Button } from \"@fluentui/react-components\";\nimport { Add24Regular, Delete24Regular } from \"@fluentui/react-icons\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { SimpleAPIResponse, uploadFileApi, deleteUploadedFileApi, listUploadedFilesApi } from \"../../api\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport styles from \"./UploadFile.module.css\";\n\ninterface Props {\n    className?: string;\n    disabled?: boolean;\n}\n\nexport const UploadFile: React.FC<Props> = ({ className, disabled }: Props) => {\n    // State variables to manage the component behavior\n    const [isCalloutVisible, setIsCalloutVisible] = useState<boolean>(false);\n    const [isUploading, setIsUploading] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [deletionStatus, setDeletionStatus] = useState<{ [filename: string]: \"pending\" | \"error\" | \"success\" }>({});\n    const [uploadedFile, setUploadedFile] = useState<SimpleAPIResponse>();\n    const [uploadedFileError, setUploadedFileError] = useState<string>();\n    const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\n    const { t } = useTranslation();\n\n    if (!useLogin) {\n        throw new Error(\"The UploadFile component requires useLogin to be true\");\n    }\n\n    const client = useMsal().instance;\n\n    // Handler for the \"Manage file uploads\" button\n    const handleButtonClick = async () => {\n        setIsCalloutVisible(!isCalloutVisible); // Toggle the Callout visibility\n\n        // Update uploaded files by calling the API\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n            listUploadedFiles(idToken);\n        } catch (error) {\n            console.error(error);\n            setIsLoading(false);\n        }\n    };\n\n    const listUploadedFiles = async (idToken: string) => {\n        listUploadedFilesApi(idToken).then(files => {\n            setIsLoading(false);\n            setDeletionStatus({});\n            setUploadedFiles(files);\n        });\n    };\n\n    const handleRemoveFile = async (filename: string) => {\n        setDeletionStatus({ ...deletionStatus, [filename]: \"pending\" });\n\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n\n            await deleteUploadedFileApi(filename, idToken);\n            setDeletionStatus({ ...deletionStatus, [filename]: \"success\" });\n            listUploadedFiles(idToken);\n        } catch (error) {\n            setDeletionStatus({ ...deletionStatus, [filename]: \"error\" });\n            console.error(error);\n        }\n    };\n\n    // Handler for the form submission (file upload)\n    const handleUploadFile = async (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        if (!e.target.files || e.target.files.length === 0) {\n            return;\n        }\n        setIsUploading(true); // Start the loading state\n        const file: File = e.target.files[0];\n        const formData = new FormData();\n        formData.append(\"file\", file);\n\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n            const response: SimpleAPIResponse = await uploadFileApi(formData, idToken);\n            setUploadedFile(response);\n            setIsUploading(false);\n            setUploadedFileError(undefined);\n            listUploadedFiles(idToken);\n        } catch (error) {\n            console.error(error);\n            setIsUploading(false);\n            setUploadedFileError(t(\"upload.uploadedFileError\"));\n        }\n    };\n\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <div>\n                <Button id=\"calloutButton\" icon={<Add24Regular />} disabled={disabled} onClick={handleButtonClick}>\n                    {t(\"upload.manageFileUploads\")}\n                </Button>\n\n                {isCalloutVisible && (\n                    <Callout\n                        role=\"dialog\"\n                        gapSpace={0}\n                        className={styles.callout}\n                        target=\"#calloutButton\"\n                        onDismiss={() => setIsCalloutVisible(false)}\n                        setInitialFocus\n                    >\n                        <form encType=\"multipart/form-data\">\n                            <div>\n                                <Label>{t(\"upload.fileLabel\")}</Label>\n                                <input\n                                    accept=\".txt, .md, .json, .png, .jpg, .jpeg, .bmp, .heic, .tiff, .pdf, .docx, .xlsx, .pptx, .html\"\n                                    className={styles.chooseFiles}\n                                    type=\"file\"\n                                    onChange={handleUploadFile}\n                                />\n                            </div>\n                        </form>\n\n                        {/* Show a loading message while files are being uploaded */}\n                        {isUploading && <Text>{t(\"upload.uploadingFiles\")}</Text>}\n                        {!isUploading && uploadedFileError && <Text>{uploadedFileError}</Text>}\n                        {!isUploading && uploadedFile && <Text>{uploadedFile.message}</Text>}\n\n                        {/* Display the list of already uploaded */}\n                        <h3>{t(\"upload.uploadedFilesLabel\")}</h3>\n\n                        {isLoading && <Text>{t(\"upload.loading\")}</Text>}\n                        {!isLoading && uploadedFiles.length === 0 && <Text>{t(\"upload.noFilesUploaded\")}</Text>}\n                        {uploadedFiles.map((filename, index) => {\n                            return (\n                                <div key={index} className={styles.list}>\n                                    <div className={styles.item}>{filename}</div>\n                                    {/* Button to remove a file from the list */}\n                                    <Button\n                                        icon={<Delete24Regular />}\n                                        onClick={() => handleRemoveFile(filename)}\n                                        disabled={deletionStatus[filename] === \"pending\" || deletionStatus[filename] === \"success\"}\n                                    >\n                                        {!deletionStatus[filename] && t(\"upload.deleteFile\")}\n                                        {deletionStatus[filename] == \"pending\" && t(\"upload.deletingFile\")}\n                                        {deletionStatus[filename] == \"error\" && t(\"upload.errorDeleting\")}\n                                        {deletionStatus[filename] == \"success\" && t(\"upload.fileDeleted\")}\n                                    </Button>\n                                </div>\n                            );\n                        })}\n                    </Callout>\n                )}\n            </div>\n        </div>\n    );\n};\n","import { Label } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport {\n    DataGridBody,\n    DataGridRow,\n    DataGrid,\n    DataGridHeader,\n    DataGridHeaderCell,\n    DataGridCell,\n    createTableColumn,\n    TableColumnDefinition\n} from \"@fluentui/react-table\";\nimport { getTokenClaims } from \"../../authConfig\";\nimport { useState, useEffect } from \"react\";\n\ntype Claim = {\n    name: string;\n    value: string;\n};\n\nexport const TokenClaimsDisplay = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n    const [claims, setClaims] = useState<Record<string, unknown> | undefined>(undefined);\n\n    useEffect(() => {\n        const fetchClaims = async () => {\n            setClaims(await getTokenClaims(instance));\n        };\n\n        fetchClaims();\n    }, []);\n\n    const ToString = (a: string | any) => {\n        if (typeof a === \"string\") {\n            return a;\n        } else {\n            return JSON.stringify(a);\n        }\n    };\n\n    let createClaims = (o: Record<string, unknown> | undefined) => {\n        return Object.keys(o ?? {}).map((key: string) => {\n            let originalKey = key;\n            try {\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\n                const url = new URL(key);\n                const parts = url.pathname.split(\"/\");\n                key = parts[parts.length - 1];\n            } catch (error) {\n                // Do not parse key if it's not a URL\n            }\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\n        });\n    };\n    const items: Claim[] = createClaims(claims);\n\n    const columns: TableColumnDefinition<Claim>[] = [\n        createTableColumn<Claim>({\n            columnId: \"name\",\n            compare: (a: Claim, b: Claim) => {\n                return a.name.localeCompare(b.name);\n            },\n            renderHeaderCell: () => {\n                return \"Name\";\n            },\n            renderCell: item => {\n                return item.name;\n            }\n        }),\n        createTableColumn<Claim>({\n            columnId: \"value\",\n            compare: (a: Claim, b: Claim) => {\n                return a.value.localeCompare(b.value);\n            },\n            renderHeaderCell: () => {\n                return \"Value\";\n            },\n            renderCell: item => {\n                return item.value;\n            }\n        })\n    ];\n\n    return (\n        <div>\n            <Label>ID Token Claims</Label>\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\n                <DataGridHeader>\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\n                </DataGridHeader>\n                <DataGridBody<Claim>>\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\n                </DataGridBody>\n            </DataGrid>\n        </div>\n    );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { LocalLanguage24Regular } from \"@fluentui/react-icons\";\nimport { IDropdownOption, Dropdown } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\n\nimport { supportedLngs } from \"./config\";\nimport styles from \"./LanguagePicker.module.css\";\n\ninterface Props {\n    onLanguageChange: (language: string) => void;\n}\n\nexport const LanguagePicker = ({ onLanguageChange }: Props) => {\n    const { i18n } = useTranslation();\n\n    const handleLanguageChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<string> | undefined) => {\n        onLanguageChange(option?.data || i18n.language);\n    };\n    const languagePickerId = useId(\"languagePicker\");\n    const { t } = useTranslation();\n\n    return (\n        <div className={styles.languagePicker}>\n            <LocalLanguage24Regular className={styles.languagePickerIcon} />\n            <Dropdown\n                id={languagePickerId}\n                selectedKey={i18n.language}\n                options={Object.entries(supportedLngs).map(([code, details]) => ({\n                    key: code,\n                    text: details.name,\n                    selected: code === i18n.language,\n                    data: code\n                }))}\n                onChange={handleLanguageChange}\n                ariaLabel={t(\"labels.languagePicker\")}\n            />\n        </div>\n    );\n};\n","import { ITextFieldProps, DefaultButton, IconButton, IButtonStyles, Callout, IStackTokens, Stack, IStackStyles, initializeIcons } from \"@fluentui/react\";\nimport { useBoolean, useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nconst stackTokens: IStackTokens = {\n    childrenGap: 4,\n    maxWidth: 300\n};\n\nconst labelCalloutStackStyles: Partial<IStackStyles> = { root: { padding: 20 } };\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { marginBottom: -3 } };\nconst iconProps = { iconName: \"Info\" };\n\ninterface IHelpCalloutProps {\n    label: string | undefined;\n    labelId: string;\n    fieldId: string | undefined;\n    helpText: string;\n}\n\nexport const HelpCallout = (props: IHelpCalloutProps): JSX.Element => {\n    const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\n    const descriptionId: string = useId(\"description\");\n    const iconButtonId: string = useId(\"iconButton\");\n    const { t } = useTranslation();\n\n    return (\n        <>\n            <Stack horizontal verticalAlign=\"center\" tokens={stackTokens}>\n                <label id={props.labelId} htmlFor={props.fieldId}>\n                    {props.label}\n                </label>\n                <IconButton\n                    id={iconButtonId}\n                    iconProps={iconProps}\n                    title={t(\"tooltips.info\")}\n                    ariaLabel={t(\"tooltips.info\")}\n                    onClick={toggleIsCalloutVisible}\n                    styles={iconButtonStyles}\n                />\n            </Stack>\n            {isCalloutVisible && (\n                <Callout target={\"#\" + iconButtonId} setInitialFocus onDismiss={toggleIsCalloutVisible} ariaDescribedBy={descriptionId} role=\"alertdialog\">\n                    <Stack tokens={stackTokens} horizontalAlign=\"start\" styles={labelCalloutStackStyles}>\n                        <span id={descriptionId}>{props.helpText}</span>\n                        <DefaultButton onClick={toggleIsCalloutVisible}>{t(\"labels.closeButton\")}</DefaultButton>\n                    </Stack>\n                </Callout>\n            )}\n        </>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, Checkbox, ICheckboxProps, IDropdownOption, IDropdownProps, Dropdown } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./GPT4VSettings.module.css\";\nimport { GPT4VInput } from \"../../api\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\n\ninterface Props {\n    gpt4vInputs: GPT4VInput;\n    isUseGPT4V: boolean;\n    updateGPT4VInputs: (input: GPT4VInput) => void;\n    updateUseGPT4V: (useGPT4V: boolean) => void;\n}\n\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\n\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        updateUseGPT4V(!!checked);\n        setUseGPT4V(!!checked);\n    };\n\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\n        if (option) {\n            const data = option.key as GPT4VInput;\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\n            data && setVectorFieldOption(data);\n        }\n    };\n\n    useEffect(() => {\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\n    }, [useGPT4V]);\n\n    const useGPT4VId = useId(\"useGPT4V\");\n    const useGPT4VFieldId = useId(\"useGPT4VField\");\n    const gpt4VInputId = useId(\"gpt4VInput\");\n    const gpt4VInputFieldId = useId(\"gpt4VInputField\");\n    const { t } = useTranslation();\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Checkbox\n                id={useGPT4VFieldId}\n                checked={useGPT4V}\n                label={t(\"labels.useGPT4V\")}\n                onChange={onuseGPT4V}\n                aria-labelledby={useGPT4VId}\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                    <HelpCallout labelId={useGPT4VId} fieldId={useGPT4VFieldId} helpText={t(\"helpTexts.useGPT4Vision\")} label={props?.label} />\n                )}\n            />\n            {useGPT4V && (\n                <Dropdown\n                    id={gpt4VInputFieldId}\n                    selectedKey={vectorFieldOption}\n                    label={t(\"labels.gpt4VInput.label\")}\n                    options={[\n                        {\n                            key: GPT4VInput.TextAndImages,\n                            text: t(\"labels.gpt4VInput.options.textAndImages\")\n                        },\n                        { text: t(\"labels.gpt4VInput.options.images\"), key: GPT4VInput.Images },\n                        { text: t(\"labels.gpt4VInput.options.texts\"), key: GPT4VInput.Texts }\n                    ]}\n                    required\n                    onChange={onSetGPT4VInput}\n                    aria-labelledby={gpt4VInputId}\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\n                        <HelpCallout labelId={gpt4VInputId} fieldId={gpt4VInputFieldId} helpText={t(\"helpTexts.gpt4VisionInputs\")} label={props?.label} />\n                    )}\n                />\n            )}\n        </Stack>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, IDropdownOption, Dropdown, IDropdownProps } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./VectorSettings.module.css\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\n\ninterface Props {\n    showImageOptions?: boolean;\n    defaultRetrievalMode: RetrievalMode;\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\n}\n\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions, defaultRetrievalMode }: Props) => {\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [vectorFieldOption, setVectorFieldOption] = useState<VectorFieldOptions>(VectorFieldOptions.Both);\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onVectorFieldsChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setVectorFieldOption(option?.key as VectorFieldOptions);\n        updateVectorFields([option?.key as VectorFieldOptions]);\n    };\n\n    useEffect(() => {\n        showImageOptions\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\n            : updateVectorFields([VectorFieldOptions.Embedding]);\n    }, [showImageOptions]);\n\n    const retrievalModeId = useId(\"retrievalMode\");\n    const retrievalModeFieldId = useId(\"retrievalModeField\");\n    const vectorFieldsId = useId(\"vectorFields\");\n    const vectorFieldsFieldId = useId(\"vectorFieldsField\");\n    const { t } = useTranslation();\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Dropdown\n                id={retrievalModeFieldId}\n                label={t(\"labels.retrievalMode.label\")}\n                selectedKey={defaultRetrievalMode.toString()}\n                options={[\n                    {\n                        key: \"hybrid\",\n                        text: t(\"labels.retrievalMode.options.hybrid\"),\n                        selected: retrievalMode == RetrievalMode.Hybrid,\n                        data: RetrievalMode.Hybrid\n                    },\n                    {\n                        key: \"vectors\",\n                        text: t(\"labels.retrievalMode.options.vectors\"),\n                        selected: retrievalMode == RetrievalMode.Vectors,\n                        data: RetrievalMode.Vectors\n                    },\n                    { key: \"text\", text: t(\"labels.retrievalMode.options.texts\"), selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                ]}\n                required\n                onChange={onRetrievalModeChange}\n                aria-labelledby={retrievalModeId}\n                onRenderLabel={(props: IDropdownProps | undefined) => (\n                    <HelpCallout labelId={retrievalModeId} fieldId={retrievalModeFieldId} helpText={t(\"helpTexts.retrievalMode\")} label={props?.label} />\n                )}\n            />\n\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\n                <Dropdown\n                    id={vectorFieldsFieldId}\n                    label={t(\"labels.vector.label\")}\n                    options={[\n                        {\n                            key: VectorFieldOptions.Embedding,\n                            text: t(\"labels.vector.options.embedding\"),\n                            selected: vectorFieldOption === VectorFieldOptions.Embedding\n                        },\n                        {\n                            key: VectorFieldOptions.ImageEmbedding,\n                            text: t(\"labels.vector.options.imageEmbedding\"),\n                            selected: vectorFieldOption === VectorFieldOptions.ImageEmbedding\n                        },\n                        { key: VectorFieldOptions.Both, text: t(\"labels.vector.options.both\"), selected: vectorFieldOption === VectorFieldOptions.Both }\n                    ]}\n                    onChange={onVectorFieldsChange}\n                    aria-labelledby={vectorFieldsId}\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\n                        <HelpCallout labelId={vectorFieldsId} fieldId={vectorFieldsFieldId} helpText={t(\"helpTexts.vectorFields\")} label={props?.label} />\n                    )}\n                />\n            )}\n        </Stack>\n    );\n};\n","import { useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextField, ITextFieldProps, Checkbox, ICheckboxProps, Dropdown, IDropdownProps, IDropdownOption } from \"@fluentui/react\";\nimport { HelpCallout } from \"../HelpCallout\";\nimport { GPT4VSettings } from \"../GPT4VSettings\";\nimport { VectorSettings } from \"../VectorSettings\";\nimport { RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\nimport styles from \"./Settings.module.css\";\n\n// Add type for onRenderLabel\ntype RenderLabelType = ITextFieldProps | IDropdownProps | ICheckboxProps;\n\nexport interface SettingsProps {\n    promptTemplate: string;\n    temperature: number;\n    retrieveCount: number;\n    seed: number | null;\n    minimumSearchScore: number;\n    minimumRerankerScore: number;\n    useSemanticRanker: boolean;\n    useSemanticCaptions: boolean;\n    excludeCategory: string;\n    includeCategory: string;\n    retrievalMode: RetrievalMode;\n    useGPT4V: boolean;\n    gpt4vInput: GPT4VInput;\n    vectorFieldList: VectorFieldOptions[];\n    showSemanticRankerOption: boolean;\n    showGPT4VOptions: boolean;\n    showVectorOption: boolean;\n    useOidSecurityFilter: boolean;\n    useGroupsSecurityFilter: boolean;\n    useLogin: boolean;\n    loggedIn: boolean;\n    requireAccessControl: boolean;\n    className?: string;\n    onChange: (field: string, value: any) => void;\n    shouldStream?: boolean; // Only used in Chat\n    useSuggestFollowupQuestions?: boolean; // Only used in Chat\n    promptTemplatePrefix?: string;\n    promptTemplateSuffix?: string;\n    showSuggestFollowupQuestions?: boolean;\n}\n\nexport const Settings = ({\n    promptTemplate,\n    temperature,\n    retrieveCount,\n    seed,\n    minimumSearchScore,\n    minimumRerankerScore,\n    useSemanticRanker,\n    useSemanticCaptions,\n    excludeCategory,\n    includeCategory,\n    retrievalMode,\n    useGPT4V,\n    gpt4vInput,\n    vectorFieldList,\n    showSemanticRankerOption,\n    showGPT4VOptions,\n    showVectorOption,\n    useOidSecurityFilter,\n    useGroupsSecurityFilter,\n    useLogin,\n    loggedIn,\n    requireAccessControl,\n    className,\n    onChange,\n    shouldStream,\n    useSuggestFollowupQuestions,\n    promptTemplatePrefix,\n    promptTemplateSuffix,\n    showSuggestFollowupQuestions\n}: SettingsProps) => {\n    const { t } = useTranslation();\n\n    // Form field IDs\n    const promptTemplateId = useId(\"promptTemplate\");\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\n    const temperatureId = useId(\"temperature\");\n    const temperatureFieldId = useId(\"temperatureField\");\n    const seedId = useId(\"seed\");\n    const seedFieldId = useId(\"seedField\");\n    const searchScoreId = useId(\"searchScore\");\n    const searchScoreFieldId = useId(\"searchScoreField\");\n    const rerankerScoreId = useId(\"rerankerScore\");\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\n    const retrieveCountId = useId(\"retrieveCount\");\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\n    const includeCategoryId = useId(\"includeCategory\");\n    const includeCategoryFieldId = useId(\"includeCategoryField\");\n    const excludeCategoryId = useId(\"excludeCategory\");\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\n    const semanticRankerId = useId(\"semanticRanker\");\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\n    const semanticCaptionsId = useId(\"semanticCaptions\");\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\n    const shouldStreamId = useId(\"shouldStream\");\n    const shouldStreamFieldId = useId(\"shouldStreamField\");\n    const suggestFollowupQuestionsId = useId(\"suggestFollowupQuestions\");\n    const suggestFollowupQuestionsFieldId = useId(\"suggestFollowupQuestionsField\");\n\n    const renderLabel = (props: RenderLabelType | undefined, labelId: string, fieldId: string, helpText: string) => (\n        <HelpCallout labelId={labelId} fieldId={fieldId} helpText={helpText} label={props?.label} />\n    );\n\n    return (\n        <div className={className}>\n            <TextField\n                id={promptTemplateFieldId}\n                className={styles.settingsSeparator}\n                defaultValue={promptTemplate}\n                label={t(\"labels.promptTemplate\")}\n                multiline\n                autoAdjustHeight\n                onChange={(_ev, val) => onChange(\"promptTemplate\", val || \"\")}\n                aria-labelledby={promptTemplateId}\n                onRenderLabel={props => renderLabel(props, promptTemplateId, promptTemplateFieldId, t(\"helpTexts.promptTemplate\"))}\n            />\n\n            <TextField\n                id={temperatureFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.temperature\")}\n                type=\"number\"\n                min={0}\n                max={1}\n                step={0.1}\n                defaultValue={temperature.toString()}\n                onChange={(_ev, val) => onChange(\"temperature\", parseFloat(val || \"0\"))}\n                aria-labelledby={temperatureId}\n                onRenderLabel={props => renderLabel(props, temperatureId, temperatureFieldId, t(\"helpTexts.temperature\"))}\n            />\n\n            <TextField\n                id={seedFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.seed\")}\n                type=\"text\"\n                defaultValue={seed?.toString() || \"\"}\n                onChange={(_ev, val) => onChange(\"seed\", val ? parseInt(val) : null)}\n                aria-labelledby={seedId}\n                onRenderLabel={props => renderLabel(props, seedId, seedFieldId, t(\"helpTexts.seed\"))}\n            />\n\n            <TextField\n                id={searchScoreFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.minimumSearchScore\")}\n                type=\"number\"\n                min={0}\n                step={0.01}\n                defaultValue={minimumSearchScore.toString()}\n                onChange={(_ev, val) => onChange(\"minimumSearchScore\", parseFloat(val || \"0\"))}\n                aria-labelledby={searchScoreId}\n                onRenderLabel={props => renderLabel(props, searchScoreId, searchScoreFieldId, t(\"helpTexts.searchScore\"))}\n            />\n\n            {showSemanticRankerOption && (\n                <TextField\n                    id={rerankerScoreFieldId}\n                    className={styles.settingsSeparator}\n                    label={t(\"labels.minimumRerankerScore\")}\n                    type=\"number\"\n                    min={1}\n                    max={4}\n                    step={0.1}\n                    defaultValue={minimumRerankerScore.toString()}\n                    onChange={(_ev, val) => onChange(\"minimumRerankerScore\", parseFloat(val || \"0\"))}\n                    aria-labelledby={rerankerScoreId}\n                    onRenderLabel={props => renderLabel(props, rerankerScoreId, rerankerScoreFieldId, t(\"helpTexts.rerankerScore\"))}\n                />\n            )}\n\n            <TextField\n                id={retrieveCountFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.retrieveCount\")}\n                type=\"number\"\n                min={1}\n                max={50}\n                defaultValue={retrieveCount.toString()}\n                onChange={(_ev, val) => onChange(\"retrieveCount\", parseInt(val || \"3\"))}\n                aria-labelledby={retrieveCountId}\n                onRenderLabel={props => renderLabel(props, retrieveCountId, retrieveCountFieldId, t(\"helpTexts.retrieveNumber\"))}\n            />\n\n            <Dropdown\n                id={includeCategoryFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.includeCategory\")}\n                selectedKey={includeCategory}\n                onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IDropdownOption) => onChange(\"includeCategory\", option?.key || \"\")}\n                aria-labelledby={includeCategoryId}\n                options={[\n                    { key: \"\", text: t(\"labels.includeCategoryOptions.all\") }\n                    // { key: \"example\", text: \"Example Category\" } // Add more categories as needed\n                ]}\n                onRenderLabel={props => renderLabel(props, includeCategoryId, includeCategoryFieldId, t(\"helpTexts.includeCategory\"))}\n            />\n\n            <TextField\n                id={excludeCategoryFieldId}\n                className={styles.settingsSeparator}\n                label={t(\"labels.excludeCategory\")}\n                defaultValue={excludeCategory}\n                onChange={(_ev, val) => onChange(\"excludeCategory\", val || \"\")}\n                aria-labelledby={excludeCategoryId}\n                onRenderLabel={props => renderLabel(props, excludeCategoryId, excludeCategoryFieldId, t(\"helpTexts.excludeCategory\"))}\n            />\n\n            {showSemanticRankerOption && (\n                <>\n                    <Checkbox\n                        id={semanticRankerFieldId}\n                        className={styles.settingsSeparator}\n                        checked={useSemanticRanker}\n                        label={t(\"labels.useSemanticRanker\")}\n                        onChange={(_ev, checked) => onChange(\"useSemanticRanker\", !!checked)}\n                        aria-labelledby={semanticRankerId}\n                        onRenderLabel={props => renderLabel(props, semanticRankerId, semanticRankerFieldId, t(\"helpTexts.useSemanticReranker\"))}\n                    />\n\n                    <Checkbox\n                        id={semanticCaptionsFieldId}\n                        className={styles.settingsSeparator}\n                        checked={useSemanticCaptions}\n                        label={t(\"labels.useSemanticCaptions\")}\n                        onChange={(_ev, checked) => onChange(\"useSemanticCaptions\", !!checked)}\n                        disabled={!useSemanticRanker}\n                        aria-labelledby={semanticCaptionsId}\n                        onRenderLabel={props => renderLabel(props, semanticCaptionsId, semanticCaptionsFieldId, t(\"helpTexts.useSemanticCaptions\"))}\n                    />\n                </>\n            )}\n\n            {useLogin && (\n                <>\n                    <Checkbox\n                        id={useOidSecurityFilterFieldId}\n                        className={styles.settingsSeparator}\n                        checked={useOidSecurityFilter || requireAccessControl}\n                        label={t(\"labels.useOidSecurityFilter\")}\n                        disabled={!loggedIn || requireAccessControl}\n                        onChange={(_ev, checked) => onChange(\"useOidSecurityFilter\", !!checked)}\n                        aria-labelledby={useOidSecurityFilterId}\n                        onRenderLabel={props => renderLabel(props, useOidSecurityFilterId, useOidSecurityFilterFieldId, t(\"helpTexts.useOidSecurityFilter\"))}\n                    />\n                    <Checkbox\n                        id={useGroupsSecurityFilterFieldId}\n                        className={styles.settingsSeparator}\n                        checked={useGroupsSecurityFilter || requireAccessControl}\n                        label={t(\"labels.useGroupsSecurityFilter\")}\n                        disabled={!loggedIn || requireAccessControl}\n                        onChange={(_ev, checked) => onChange(\"useGroupsSecurityFilter\", !!checked)}\n                        aria-labelledby={useGroupsSecurityFilterId}\n                        onRenderLabel={props =>\n                            renderLabel(props, useGroupsSecurityFilterId, useGroupsSecurityFilterFieldId, t(\"helpTexts.useGroupsSecurityFilter\"))\n                        }\n                    />\n                </>\n            )}\n\n            {showGPT4VOptions && (\n                <GPT4VSettings\n                    gpt4vInputs={gpt4vInput}\n                    isUseGPT4V={useGPT4V}\n                    updateUseGPT4V={val => onChange(\"useGPT4V\", val)}\n                    updateGPT4VInputs={val => onChange(\"gpt4vInput\", val)}\n                />\n            )}\n\n            {showVectorOption && (\n                <VectorSettings\n                    defaultRetrievalMode={retrievalMode}\n                    showImageOptions={useGPT4V && showGPT4VOptions}\n                    updateVectorFields={val => onChange(\"vectorFieldList\", val)}\n                    updateRetrievalMode={val => onChange(\"retrievalMode\", val)}\n                />\n            )}\n\n            {/* Streaming checkbox for Chat */}\n            {shouldStream !== undefined && (\n                <Checkbox\n                    id={shouldStreamFieldId}\n                    className={styles.settingsSeparator}\n                    checked={shouldStream}\n                    label={t(\"labels.shouldStream\")}\n                    onChange={(_ev, checked) => onChange(\"shouldStream\", !!checked)}\n                    aria-labelledby={shouldStreamId}\n                    onRenderLabel={props => renderLabel(props, shouldStreamId, shouldStreamFieldId, t(\"helpTexts.streamChat\"))}\n                />\n            )}\n\n            {/* Followup questions checkbox for Chat */}\n            {showSuggestFollowupQuestions && (\n                <Checkbox\n                    id={suggestFollowupQuestionsFieldId}\n                    className={styles.settingsSeparator}\n                    checked={useSuggestFollowupQuestions}\n                    label={t(\"labels.useSuggestFollowupQuestions\")}\n                    onChange={(_ev, checked) => onChange(\"useSuggestFollowupQuestions\", !!checked)}\n                    aria-labelledby={suggestFollowupQuestionsId}\n                    onRenderLabel={props =>\n                        renderLabel(props, suggestFollowupQuestionsId, suggestFollowupQuestionsFieldId, t(\"helpTexts.suggestFollowupQuestions\"))\n                    }\n                />\n            )}\n        </div>\n    );\n};\n","import { useRef, useState, useEffect, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Panel, DefaultButton } from \"@fluentui/react\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport appLogo from \"/workspaces/azure-search-openai-demo/app/frontend/logo.png\";\nimport styles from \"./Chat.module.css\";\n\nimport {\n    chatApi,\n    configApi,\n    RetrievalMode,\n    ChatAppResponse,\n    ChatAppResponseOrError,\n    ChatAppRequest,\n    ResponseMessage,\n    VectorFieldOptions,\n    GPT4VInput,\n    SpeechConfig\n} from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { HistoryPanel } from \"../../components/HistoryPanel\";\nimport { HistoryProviderOptions, useHistoryManager } from \"../../components/HistoryProviders\";\nimport { HistoryButton } from \"../../components/HistoryButton\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { UploadFile } from \"../../components/UploadFile\";\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { LoginContext } from \"../../loginContext\";\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\nimport { Settings } from \"../../components/Settings/Settings\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [seed, setSeed] = useState<number | null>(null);\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [includeCategory, setIncludeCategory] = useState<string>(\"\");\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\n\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\n    const [showChatHistoryBrowser, setShowChatHistoryBrowser] = useState<boolean>(false);\n    const [showChatHistoryCosmos, setShowChatHistoryCosmos] = useState<boolean>(false);\n    const audio = useRef(new Audio()).current;\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    const speechConfig: SpeechConfig = {\n        speechUrls,\n        setSpeechUrls,\n        audio,\n        isPlaying,\n        setIsPlaying\n    };\n\n    const getConfig = async () => {\n        configApi().then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n            setShowUserUpload(config.showUserUpload);\n            setshowLanguagePicker(config.showLanguagePicker);\n            setShowSpeechInput(config.showSpeechInput);\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\n            setShowChatHistoryBrowser(config.showChatHistoryBrowser);\n            setShowChatHistoryCosmos(config.showChatHistoryCosmos);\n        });\n    };\n\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: ChatAppResponse = {\n                        ...askResponse,\n                        message: { content: answer, role: askResponse.message.role }\n                    };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"context\"] && event[\"context\"][\"data_points\"]) {\n                    event[\"message\"] = event[\"delta\"];\n                    askResponse = event as ChatAppResponse;\n                } else if (event[\"delta\"] && event[\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"delta\"][\"content\"]);\n                } else if (event[\"context\"]) {\n                    // Update context with new keys from latest event\n                    askResponse.context = { ...askResponse.context, ...event[\"context\"] };\n                } else if (event[\"error\"]) {\n                    throw Error(event[\"error\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: ChatAppResponse = {\n            ...askResponse,\n            message: { content: answer, role: askResponse.message.role }\n        };\n        return fullResponse;\n    };\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { loggedIn } = useContext(LoginContext);\n\n    const historyProvider: HistoryProviderOptions = (() => {\n        if (useLogin && showChatHistoryCosmos) return HistoryProviderOptions.CosmosDB;\n        if (showChatHistoryBrowser) return HistoryProviderOptions.IndexedDB;\n        return HistoryProviderOptions.None;\n    })();\n    const historyManager = useHistoryManager(historyProvider);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => [\n                { content: a[0], role: \"user\" },\n                { content: a[1].message.content, role: \"assistant\" }\n            ]);\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        include_category: includeCategory.length === 0 ? undefined : includeCategory,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        temperature: temperature,\n                        minimum_reranker_score: minimumRerankerScore,\n                        minimum_search_score: minimumSearchScore,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFieldList,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput,\n                        language: i18n.language,\n                        ...(seed !== null ? { seed: seed } : {})\n                    }\n                },\n                // AI Chat Protocol: Client must pass on any session state received from the server\n                session_state: answers.length ? answers[answers.length - 1][1].session_state : null\n            };\n\n            const response = await chatApi(request, shouldStream, token);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (response.status > 299 || !response.ok) {\n                throw Error(`Request failed with status ${response.status}`);\n            }\n            if (shouldStream) {\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, response.body);\n                setAnswers([...answers, [question, parsedResponse]]);\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\n                    const token = client ? await getToken(client) : undefined;\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse]], token);\n                }\n            } else {\n                const parsedResponse: ChatAppResponseOrError = await response.json();\n                if (parsedResponse.error) {\n                    throw Error(parsedResponse.error);\n                }\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\n                    const token = client ? await getToken(client) : undefined;\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse as ChatAppResponse]], token);\n                }\n            }\n            setSpeechUrls([...speechUrls, null]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setSpeechUrls([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    const handleSettingsChange = (field: string, value: any) => {\n        switch (field) {\n            case \"promptTemplate\":\n                setPromptTemplate(value);\n                break;\n            case \"temperature\":\n                setTemperature(value);\n                break;\n            case \"seed\":\n                setSeed(value);\n                break;\n            case \"minimumRerankerScore\":\n                setMinimumRerankerScore(value);\n                break;\n            case \"minimumSearchScore\":\n                setMinimumSearchScore(value);\n                break;\n            case \"retrieveCount\":\n                setRetrieveCount(value);\n                break;\n            case \"useSemanticRanker\":\n                setUseSemanticRanker(value);\n                break;\n            case \"useSemanticCaptions\":\n                setUseSemanticCaptions(value);\n                break;\n            case \"excludeCategory\":\n                setExcludeCategory(value);\n                break;\n            case \"includeCategory\":\n                setIncludeCategory(value);\n                break;\n            case \"useOidSecurityFilter\":\n                setUseOidSecurityFilter(value);\n                break;\n            case \"useGroupsSecurityFilter\":\n                setUseGroupsSecurityFilter(value);\n                break;\n            case \"shouldStream\":\n                setShouldStream(value);\n                break;\n            case \"useSuggestFollowupQuestions\":\n                setUseSuggestFollowupQuestions(value);\n                break;\n            case \"useGPT4V\":\n                setUseGPT4V(value);\n                break;\n            case \"gpt4vInput\":\n                setGPT4VInput(value);\n                break;\n            case \"vectorFieldList\":\n                setVectorFieldList(value);\n                break;\n            case \"retrievalMode\":\n                setRetrievalMode(value);\n                break;\n        }\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const { t, i18n } = useTranslation();\n\n    return (\n        <div className={styles.container}>\n            {/* Setting the page title using react-helmet-async */}\n            <Helmet>\n                <title>{t(\"pageTitle\")}</title>\n            </Helmet>\n            <div className={styles.commandsSplitContainer}>\n                <div className={styles.commandsContainer}>\n                    {((useLogin && showChatHistoryCosmos) || showChatHistoryBrowser) && (\n                        <HistoryButton className={styles.commandButton} onClick={() => setIsHistoryPanelOpen(!isHistoryPanelOpen)} />\n                    )}\n                </div>\n                <div className={styles.commandsContainer}>\n                    <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                    {showUserUpload && <UploadFile className={styles.commandButton} disabled={!loggedIn} />}\n                    <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                </div>\n            </div>\n            <div className={styles.chatRoot} style={{ marginLeft: isHistoryPanelOpen ? \"300px\" : \"0\" }}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <img src={appLogo} alt=\"App logo\" width=\"115\" height=\"115\" />\n\n                            <h1 className={styles.chatEmptyStateTitle}>{t(\"chatEmptyStateTitle\")}</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}>{t(\"chatEmptyStateSubtitle\")}</h2>\n                            {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />}\n\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                index={index}\n                                                speechConfig={speechConfig}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                                showSpeechOutputAzure={showSpeechOutputAzure}\n                                                showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                index={index}\n                                                speechConfig={speechConfig}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                                showSpeechOutputAzure={showSpeechOutputAzure}\n                                                showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder={t(\"defaultExamples.placeholder\")}\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                            showSpeechInput={showSpeechInput}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                {((useLogin && showChatHistoryCosmos) || showChatHistoryBrowser) && (\n                    <HistoryPanel\n                        provider={historyProvider}\n                        isOpen={isHistoryPanelOpen}\n                        notify={!isStreaming && !isLoading}\n                        onClose={() => setIsHistoryPanelOpen(false)}\n                        onChatSelected={answers => {\n                            if (answers.length === 0) return;\n                            setAnswers(answers);\n                            lastQuestionRef.current = answers[answers.length - 1][0];\n                        }}\n                    />\n                )}\n\n                <Panel\n                    headerText={t(\"labels.headerText\")}\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel={t(\"labels.closeButton\")}\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>{t(\"labels.closeButton\")}</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <Settings\n                        promptTemplate={promptTemplate}\n                        temperature={temperature}\n                        retrieveCount={retrieveCount}\n                        seed={seed}\n                        minimumSearchScore={minimumSearchScore}\n                        minimumRerankerScore={minimumRerankerScore}\n                        useSemanticRanker={useSemanticRanker}\n                        useSemanticCaptions={useSemanticCaptions}\n                        excludeCategory={excludeCategory}\n                        includeCategory={includeCategory}\n                        retrievalMode={retrievalMode}\n                        useGPT4V={useGPT4V}\n                        gpt4vInput={gpt4vInput}\n                        vectorFieldList={vectorFieldList}\n                        showSemanticRankerOption={showSemanticRankerOption}\n                        showGPT4VOptions={showGPT4VOptions}\n                        showVectorOption={showVectorOption}\n                        useOidSecurityFilter={useOidSecurityFilter}\n                        useGroupsSecurityFilter={useGroupsSecurityFilter}\n                        useLogin={!!useLogin}\n                        loggedIn={loggedIn}\n                        requireAccessControl={requireAccessControl}\n                        shouldStream={shouldStream}\n                        useSuggestFollowupQuestions={useSuggestFollowupQuestions}\n                        showSuggestFollowupQuestions={true}\n                        onChange={handleSettingsChange}\n                    />\n                    {useLogin && <TokenClaimsDisplay />}\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import { DefaultButton } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./LoginButton.module.css\";\nimport { getRedirectUri, loginRequest, appServicesLogout, getUsername, checkLoggedIn } from \"../../authConfig\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { LoginContext } from \"../../loginContext\";\n\nexport const LoginButton = () => {\n    const { instance } = useMsal();\n    const { loggedIn, setLoggedIn } = useContext(LoginContext);\n    const activeAccount = instance.getActiveAccount();\n    const [username, setUsername] = useState(\"\");\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        const fetchUsername = async () => {\n            setUsername((await getUsername(instance)) ?? \"\");\n        };\n\n        fetchUsername();\n    }, []);\n\n    const handleLoginPopup = () => {\n        /**\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\n         */\n        instance\n            .loginPopup({\n                ...loginRequest,\n                redirectUri: getRedirectUri()\n            })\n            .catch(error => console.log(error))\n            .then(async () => {\n                setLoggedIn(await checkLoggedIn(instance));\n                setUsername((await getUsername(instance)) ?? \"\");\n            });\n    };\n    const handleLogoutPopup = () => {\n        if (activeAccount) {\n            instance\n                .logoutPopup({\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\n                    account: instance.getActiveAccount()\n                })\n                .catch(error => console.log(error))\n                .then(async () => {\n                    setLoggedIn(await checkLoggedIn(instance));\n                    setUsername((await getUsername(instance)) ?? \"\");\n                });\n        } else {\n            appServicesLogout();\n        }\n    };\n    return (\n        <DefaultButton\n            text={loggedIn ? `${t(\"logout\")}\\n${username}` : `${t(\"login\")}`}\n            className={styles.loginButton}\n            onClick={loggedIn ? handleLogoutPopup : handleLoginPopup}\n        ></DefaultButton>\n    );\n};\n","import React, { useState, useEffect, useRef, RefObject } from \"react\";\nimport { Outlet, NavLink, Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./Layout.module.css\";\n\nimport { useLogin } from \"../../authConfig\";\n\nimport { LoginButton } from \"../../components/LoginButton\";\nimport { IconButton } from \"@fluentui/react\";\n\nconst Layout = () => {\n    const { t } = useTranslation();\n    const [menuOpen, setMenuOpen] = useState(false);\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\n\n    const toggleMenu = () => {\n        setMenuOpen(!menuOpen);\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n            setMenuOpen(false);\n        }\n    };\n\n    useEffect(() => {\n        if (menuOpen) {\n            document.addEventListener(\"mousedown\", handleClickOutside);\n        } else {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        }\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [menuOpen]);\n\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer} ref={menuRef}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>{t(\"headerTitle\")}</h3>\n                    </Link>\n                    <nav>\n                        <ul className={`${styles.headerNavList} ${menuOpen ? styles.show : \"\"}`}>\n                            <li>\n                                <NavLink\n                                    to=\"/\"\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\n                                    onClick={() => setMenuOpen(false)}\n                                >\n                                    {t(\"chat\")}\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink\n                                    to=\"/qa\"\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\n                                    onClick={() => setMenuOpen(false)}\n                                >\n                                    {t(\"qa\")}\n                                </NavLink>\n                            </li>\n                        </ul>\n                    </nav>\n                    <div className={styles.loginMenuContainer}>\n                        {useLogin && <LoginButton />}\n                        <IconButton\n                            iconProps={{ iconName: \"GlobalNavButton\" }}\n                            className={styles.menuToggle}\n                            onClick={toggleMenu}\n                            ariaLabel={t(\"labels.toggleMenu\")}\n                        />\n                    </div>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","import { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\nimport { useEffect, useState } from \"react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { LoginContext } from \"./loginContext\";\nimport Layout from \"./pages/layout/Layout\";\n\nconst LayoutWrapper = () => {\n    const [loggedIn, setLoggedIn] = useState(false);\n    if (useLogin) {\n        var msalInstance = new PublicClientApplication(msalConfig);\n\n        // Default to using the first account if no account is active on page load\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n        }\n\n        // Listen for sign-in event and set active account\n        msalInstance.addEventCallback(event => {\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n                const account = event.payload as AccountInfo;\n                msalInstance.setActiveAccount(account);\n            }\n        });\n\n        useEffect(() => {\n            const fetchLoggedIn = async () => {\n                setLoggedIn(await checkLoggedIn(msalInstance));\n            };\n\n            fetchLoggedIn();\n        }, []);\n\n        return (\n            <MsalProvider instance={msalInstance}>\n                <LoginContext.Provider\n                    value={{\n                        loggedIn,\n                        setLoggedIn\n                    }}\n                >\n                    <Layout />\n                </LoginContext.Provider>\n            </MsalProvider>\n        );\n    } else {\n        return (\n            <LoginContext.Provider\n                value={{\n                    loggedIn,\n                    setLoggedIn\n                }}\n            >\n                <Layout />\n            </LoginContext.Provider>\n        );\n    }\n};\n\nexport default LayoutWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { initializeIcons } from \"@fluentui/react\";\n\nimport \"./index.css\";\n\nimport Chat from \"./pages/chat/Chat\";\nimport LayoutWrapper from \"./layoutWrapper\";\nimport i18next from \"./i18n/config\";\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: <LayoutWrapper />,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"qa\",\n                lazy: () => import(\"./pages/ask/Ask\")\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <I18nextProvider i18n={i18next}>\n            <HelmetProvider>\n                <RouterProvider router={router} />\n            </HelmetProvider>\n        </I18nextProvider>\n    </React.StrictMode>\n);\n"],"file":"assets/index-B34qwhdp.js"}